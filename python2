59-2
程序可以理解为指令+数据，也可以理解为算法+数据结构
常用内建函数
   cmp(obj1,obj2),如果obj1<obj2,则返回＜0的值，否则返回＞0的值，如果相等，则返回0.此命令不能在python3上使用
   repr(obj)返回一个对象的字符串表示
   str(obj)返回对象可读性适合的字符串表示
   type(obj)返回特定对象的类型信息

python有很多内置函数,这些内置函数是在内置模块中
python的8个关键要素：
1)基本数据类型:一般是指数字，字符串
2)对象引用:可变对象和不可变对象，搞清楚对象和对象引用的关系
3)组合数据类型:一般是元组（不可变对象）和列表（可变对象）
4)逻辑操作符
      身份操作符 is，is只比较内存中地址是否一样，即使对象内容一样，但是内存地址不一样也会判断是false
      比较操作符 ＞，＜ == 等
      成员操作符 in，主要是应用在序列中，比如字符串，列表，元组
      逻辑运算符 ？没有明白
5)控制流语句:
       if语句
       while语句
       for语句
6)算术操作符:
       +，-，*，/,//，+=，特别是+和+=针对不同数据类型时的差异
       iterable表示可迭代的，实际上只有序列才能进行迭代，比如字符串，列表，元组
7)输入/输出:主要是print（）和input（）函数的使用
8)函数的创建和调用：函数也是一种对象，def关键字就创建了一个函数对象

python环境说明：
   1）只要系统不是最简洁安装，默认情况下python就是安装的，直接使用python命令即可进入交互模式
   2）python2和python3有很大差别，系统默认是python2，建议直接使用python3
python第三方模块安装
  1）wget https://bootstrap.pypa.io/get-pip.py  --no-check-certificate
  2）python3  get-pip.py  （补充说明，以.py结尾的python脚步，可以用python命令执行，类似于bash xxx.sh这样）
  3）查看pip3命令是否已经生成
  4) pip3  install ipython
也可以使用easy_install pip来安装
centos6上安装python3步骤：
[root@node1 ~]# yum list all|grep python34
[root@node1 ~]# yum install -y python34 python34-devel python34-libs python34-tools
[root@node1 ~]# wget https://bootstrap.pypa.io/get-pip.py  --no-check-certificate
[root@node1 ~]# python3  get-pip.py
[root@node1 ~]# pip3  install ipython

集合的标准定义方式
>>> b=set({1,2,3}) 
>>> b
{1, 2, 3}
>>> c=set([1,2,3])
>>> type(c)
<class 'set'>
>>> c
{1, 2, 3}
dict的key必须是不可变对象,这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。
这个通过key计算位置的算法称为哈希算法（Hash），要保证hash的正确性，作为key的对象就不能变。
在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：
>>> c=dict({'a':1,'b':'hello'}) 
>>> c
{'a': 1, 'b': 'hello'}
案例：使用内置函数dict创建字典
>>> dict([('first','hello'),('second',2)])
{'second': 2, 'first': 'hello'}
元组的标准定义方式,元组中只有一个元素时，也要加逗号
>>> d=tuple((2,45)) 
>>> d
(2, 45)
列表的标准定义方式
>>> e=list([1,2,3]) 
>>> e
[1, 2, 3]
序列是以连续的数字作为索引，而字典是以关键字做为索引
案例:字典的遍历
>>> e={'title':1,'number':'hello'}
>>> e
{'title': 1, 'number': 'hello'}
>>> for k,v in e.items():
...         print(k,v)
...
title 1
number hello
案例：字典的遍历
>>> a={'a':1,'b':2}
>>> a
{'a': 1, 'b': 2}
>>> for i in a:
...     print(a[i])
...
1
2
案例：序列的遍历技巧，同时偏移索引和元素
>>> a=[1,2,3]
>>> a
[1, 2, 3]
>>> for i,v in enumerate(a):
...         print(i,v)
...
0 1
1 2
2 3
案例：另一种序列的遍历
>>> a=[1,2,3]
>>> for i in range(len(a)):
...          print(a[i])
...
1
2
3
案例：同时遍历两个序列，format的意思参考下面案例
>>> b=['hello','world','bencent']
>>> a=[1,2,3]
>>> for q,v in zip(a,b):
...         print("what is {0},it is {1}".format(q,v))
...
what is 1,it is hello
what is 2,it is world
what is 3,it is bencent
案例：标准输出
>>> b='3'
>>> print('b is %s' % (b,))  b是字符串，所以要用%s
b is 3
>>> print('b is %d' % (int(b)/3,)) 内建函数int（number）可以把数字字符串转换为整型，这样才可以支持数学运算
b is 1
案例:格式化输出的老版本使用，以后尽量使用str.format，因为%这种表示方法会被废弃掉
案例：print的使用
>>> a=7
>>> print(a)
7
>>> print("a=",a) 单双引号都可以
a= 7
>>> print('a=',a)
a= 7
案例：三引号允许字符串跨多行，字符串中可以包含换行符，特殊字符等
>>> a='''hello 此处直接敲enter
... nihao'''
>>> print(a)  此时a字符串有两行内容
hello
nihao
案例：求一个数的绝对值
>>> abs(-4)
4
>>> _   下划线_在解释器中有特别的含义，表示最后一个表达式的值
4
案例：python3提供一个界面输入值
>>> b=input('please input a number=')  这种表述只能在python3使用，python2是b=raw_input('please input a number=')
please input a number
>>> print(b)
3
案例：python2提供一个界面输入值
b=raw_input('please input a number=')
案例：在pyton中，字符串被定义为字符的集合，支持使用索引操作符（[]）和切片操作符（[:]）可以得到子字符串，+表示字符串连接操作，*表示字符串重复运算
>>> a='hello world'
>>> b='second world'
>>> a+b
'hello worldsecond world'
>>> a*2
'hello worldhello world'
>>> print(a[2])  字符串从0开始计数
l
列表排序
>>>b=[1,2,0,10,7]
>>> b.sort() 此时不会直接输出结果，再次查看列表时已经按顺序排好了
>>> b
[0, 1, 2, 7, 10]
列表支持原创反转 
>>> a=[1, 2, 4, 5]
>>> a.reverse()
>>> a
[5, 4, 2, 1]
案例：字符串的切片
>>> a='abcdefghijklmn'
>>> a[::-1]   实际上就是a[-1::-1],同时也实现了字符串反转
'nmlkjihgfedcba'
>>> a[1:8:2] 第三个参数理解为步长
'bdfh'
>>> a[:-1]
'abcdefghijklm'
>>> for i in range(-1,-len(a),-1):   表示-1+（-1）=-2
...     a[:i]
...
'abcdefghijklm'
'abcdefghijkl'
'abcdefghijk'
'abcdefghij'
'abcdefghi'
'abcdefgh'
'abcdefg'
'abcdef'
'abcde'
'abcd'
'abc'
'ab'
'a'
>>> a
'abcdefghijklmn'
>>> len(a) 计算序列里面元素的长度
14
案例：列表
>>> a=["mon","tue","wed"]
>>> a[0]
'mon'
>>> a[0:1] 左边是闭区间，右边是开区间
['mon']
案例:接着上面案例，证明列表中的对象可以修改
>>> a.pop()     从最右边弹出数据
'wed'
>>> a.append(1) 从最右边加入数据
>>> a
['mon', 'tue', 1]
案例：实现让列表中的对象不被修改
>>> l2=[123,789]
>>> print(l2)
[123, 789]
>>> def f1(list):
...     list[0]="hello"
...     print(list)
...
>>> f1(l2[:])    这句是关键
['hello', 789]
>>> print(l2)
[123, 789]
案例：证明整型类型的原始对象不能修改
>>> a=8
>>> def f1(n):
...     n=9
...     print(n)
...
>>> f1(a)
9
>>> print(a)
8
案例：证明字符串类型的原始对象不能修改
>>> a='hello'
>>> def f(n):
...     n="test"
...     print(n)
...
>>> x=f(a)
test
>>> a
'hello'
案例：证明字符串类型的原始对象不能修改
>>> b='world'
>>> b[0]
'w'
>>> b[0]='h'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
案例：元组
>>> b=("thu","fri")
>>> b[0]
'thu'
案例：证明元组不能改变，不能给元组的独立元素赋值
>>> c=(1,2,3)
>>> c[0]=4
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
案例：字典
>>> d={'name':'jerry','age':20} 字典的定义,对应的key也要加引号
>>> d['name'] 字典的引用
'jerry'
>>> len(d)
2
案例：r表示输出原始字符串，正常情况下/n表示换行
>>> d=r'skdjfks\nkfjask'
>>> print(d)
skdjfks\nkfjask
案例：python可以处理没有意义的切片索引，不会报错，但是针对单个元素，会报错
>>> a=[1,2,3]
>>> a[0:100]
[1, 2, 3]
>>> a[100]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list index out of range
案例：end表示避免输出后换行
>>> def f():
...     for i in range(5):
...         print(i,end='')
...     print()
...
>>> f()
01234
>>> f   千万不能加（），加了（）就是引用函数f（）
<function f at 0x7f4555e48bf8>   说明函数也是一个对象
>>> id(f)
139935770512376

案例：针对可改变类型数据的一个典型操作，不让默认值在后续调用中累计
>>> def f(a,l=None):
...      if l is None:
...         l=[]
...      l.append(a)
...      print(l)
...
>>>
>>> f(1)
[1]
>>> f(2)
[2]
案例：集合是一个包含不同元组的无序集，基本功能是关系测试和剔除重复记录
set和dict类似，也是一组key的集合，但不存储value。
set的原理和dict一样，所以，同样不可以放入可变对象
>>> s1=set('hello') 字符串务必加引号
>>> s1              显示出集合中的元素
{'h', 'e', 'o', 'l'}
>>> 'e' in s1  测试e是否在集合s1中
True
>>> 'f' in s1
False
案例：集合的交差并补运算
>>> a=set('abcd')
>>> a
{'c', 'b', 'd', 'a'}
>>> b=set('bche')
>>> b
{'e', 'b', 'h', 'c'}
>>> a&b
{'b', 'c'}
>>> a-b  这个差实列没有举好
{'d', 'a'}
>>> a|b
{'e', 'h', 'a', 'd', 'b', 'c'}
>>> a^b                  补运算就是把两个集合的交集扣除掉，然后把剩余的元素再组织成一个集合
{'e', 'd', 'h', 'a'}
案例：查看身份标识
>>> a=1
>>> b=1
>>> id(a)
140709947912192
>>> id(b)
140709947912192   id命令表示身份标识，即查看对象的内存地址。内存地址一样，表示内存对象1被应用了两次
案例：三元表达式使用案例：可以使用if语句替代
>>> a=1
>>> b=2
>>> max=a if a>b else b
>>> print(max)
2
案例：Python里面实现tuple和list的转换
序列包含列表，元组，字符串
len()返回序列的长度
list()把可迭代对象转换成列表
tuple()把可迭代对象转换成元组
str() 返回对象可读性适合的字符串表示
案例:range([start,] stop[, step])，生成一个序列，实际是一个列表
>>> a=range(1,10)
>>> print a
[1, 2, 3, 4, 5, 6, 7, 8, 9]
案例:xrange则不会直接生成一个list，而是每次调用返回其中的一个值；xrange用法与range完全相同，所不同的是生成的不是一个list对象，而是一个生成器
>>> b=xrange(1,10)
>>> print b
xrange(1, 10)
>>> print b[0]
1
>>> print b[1]
2
以上两个案例只能在python2中使用，python3已结没有xrange了。
由上面的示例可以知道：要生成很大的数字序列的时候，用xrange会比range性能优很多，因为不需要一上来就开辟一块很大的内存空间。
案例：python3中只有range，没有xrange
>>> a=range(5)
>>> a  此时range生成的是一个生成器，元素需要一个一个的调用
range(0, 5)
>>> list(a)
[0, 1, 2, 3, 4]
>>> print(a)
range(0, 5)
>>> a[1]
1


案例：Python的内存管理机制
答:从三个方面来说,一对象的引用计数机制,二垃圾回收机制,三内存池机制
一、对象的引用计数机制
    Python内部使用引用计数，来保持追踪内存中的对象，所有对象都有引用计数。
引用计数增加的情况：
  1，一个对象分配一个新名称
  2，将其放入一个容器中（如列表、元组或字典）
引用计数减少的情况：
  1，使用del语句对对象别名显示的销毁
  2，引用超出作用域或被重新赋值
sys.getrefcount( )函数可以获得对象的当前引用计数
多数情况下，引用计数比你猜测得要大得多。对于不可变数据（如数字和字符串），解释器会在程序的不同部分共享内存，以便节约内存。
二、垃圾回收
  1，当一个对象的引用计数归零时，它将被垃圾收集机制处理掉。
  2，当两个对象a和b相互引用时，del语句可以减少a和b的引用计数，并销毁用于引用底层对象的名称。然而由于每个对象都包含一个对其他对象的应用，因此引用计数不会归零，
     对象也不会销毁。（从而导致内存泄露）。为解决这一问题，解释器会定期执行一个循环检测器，搜索不可访问对象的循环并删除它们。
三、内存池机制
Python提供了对内存的垃圾收集机制，但是它将不用的内存放到内存池而不是返回给操作系统。
  1，Pymalloc机制。为了加速Python的执行效率，Python引入了一个内存池机制，用于管理对小块内存的申请和释放。
  2，Python中所有小于256个字节的对象都使用pymalloc实现的分配器，而大的对象则使用系统的malloc。
  3，对于Python对象，如整数，浮点数和List，都有其独立的私有内存池，对象间不共享他们的内存池。也就是说如果你分配又释放了大量的整数，
     用于缓存这些整数的内存就不能再分配给浮点数。

案例：赋值，浅拷贝，深拷贝的区别
赋值：就是创建了对象的一个新的引用，修改其中任意一个变量都会影响到另一个。
浅拷贝:copy.copy,只拷贝父对象，不会拷贝对象的内部的子对象。
深拷贝:copy.deepcopy,拷贝对象及其子对象

案例:
[root@localhost ~]# vim /root/test10.py
#!/usr/bin/python3
#
import copy
a = [1, 2, 3, 4, ['a', 'b']] #原始对象
b = a                        #赋值，传对象的引用
c = copy.copy(a)             #对象拷贝，浅拷贝
d = copy.deepcopy(a)         #对象拷贝，深拷贝
a.append(5)                  #修改对象a
a[4].append('c')             #修改对象a中的['a', 'b']数组对象
print('a = ', a)
print('b = ', b)
print('c = ', c)
print('d = ', d)
[root@localhost ~]# python3 /root/test10.py
a =  [1, 2, 3, 4, ['a', 'b', 'c'], 5]
b =  [1, 2, 3, 4, ['a', 'b', 'c'], 5]
c =  [1, 2, 3, 4, ['a', 'b', 'c']]
d =  [1, 2, 3, 4, ['a', 'b']]
案例:实现删除一个list里面的重复元素
方法1：用set集合方法解决
方法2：用sort进行排序，然后从最后一个元素开始判断,实现删除重复的元素。只能以逆序来删除数据才不会影响前面的索引，正序删除数据索引会出错误
#!/usr/bin/python3
#
list1=[2,3,8,4,9,5,6]
list2=[5,6,10,17,11,2]
a=list1+list2
a.sort()
last=a[-1]
for i in range(len(a)-2,-1,-1):
    if last==a[i]:
       del a[i]
    else:
       last=a[i]
print(a)
如果代码中有中文内容，最好在代码顶端加上#coding=utf-8
案例：字符串的查找，find方法找不到就返回-1，index方法找不到就报错
>>> a='hello world nihao hello nihao'
>>> a.find('nihao',0,len(a))  0和len(a)表示开始，结束位置，可以省略
12
>>> a.index('nihao',0,len(a)) 返回的是被匹配到的字符串的首个元素的索引位置
12
>>> a[12:]
'nihao hello nihao'


案例：字符串的替换
>>> a
'hello world nihao hello nihao'
>>> a.replace('nihao','haha') 没有指定次数时，有多少替换多少
'hello world haha hello haha'
>>> a.replace('nihao','haha',1)  表示最多替换1次
'hello world haha hello nihao'
案例：字符串分割
>>> a.split(' ')  以空格为分隔符进行分隔，不指定分割次数，就是贪婪模式
['hello', 'world', 'nihao', 'hello', 'nihao']
>>> a.split(' ',2)  最多分割2次
['hello', 'world', 'nihao hello nihao']
案例：判断字符串的开始和结束，是就返回true，不是就返回false
>>> a
'hello world nihao hello nihao'
>>> a.startswith('hel')
True
>>> a.endswith('nihao')
True
案例：格式对齐
>>> a='123'
>>> a.center(10) 中间对齐
'   123    '
>>> a.rjust(10)  右对齐
'       123'
>>> a.ljust(10) 左对齐
'123       '
案例：去除掉左右两边的空格
>>> b='   hello world   '
>>> b
'   hello world   '
>>> b.lstrip()  去除左边空格
'hello world   '
>>> b.rstrip()  去除右边空格
'   hello world'
案例：分割字符串
>>> c='hello world nihao world nihao hello'
>>> c.partition('world')   以world字符串进行分割，分割成world前，world自身，world后三部分
('hello ', 'world', ' nihao world nihao hello')
>>> c.rpartition('nihao')  从右边开始分割
('hello world nihao world ', 'nihao', ' hello')

